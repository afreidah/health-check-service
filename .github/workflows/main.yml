# -----------------------------------------------------------------------
# GitHub Actions CI/CD Workflow
# -----------------------------------------------------------------------
#
# Pipeline Stages:
#   PR Pipeline (pull_request to main):
#     - Code formatting, linting, tests, build, security scans
#
#   Merge Pipeline (push to main):
#     - Re-runs all PR checks
#     - Builds and tags multi-arch Docker images (AMD64, ARM64)
#     - Pushes images to container registry with commit SHA
#
# -----------------------------------------------------------------------

name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# Set common environment variables
env:
  GO_VERSION: '1.25.1'

# Shared job setup as a composite action
jobs:
  # PR checks - runs on pull requests
  pr-checks:
    name: PR Pipeline
    if: github.event_name == 'pull_request'
    runs-on: [self-hosted, linux]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install Development Tools
      run: |
        # Add Go bin directory to PATH
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
        # Install golangci-lint
        if ! command -v golangci-lint >/dev/null 2>&1; then
          echo "Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        fi
        
        # Install gotestsum
        if ! command -v gotestsum >/dev/null 2>&1; then
          echo "Installing gotestsum..."
          go install gotest.tools/gotestsum@latest
        fi
        
        # Install trivy
        if ! command -v trivy >/dev/null 2>&1; then
          echo "Installing trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $(go env GOPATH)/bin
        fi
        
        # Install checkov via pipx
        if ! command -v pipx >/dev/null 2>&1; then
          if command -v apt-get >/dev/null 2>&1; then
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get update -y
            sudo apt-get install -y python3-venv pipx
          fi
        fi
        python3 -m pipx ensurepath || true
        pipx install --force checkov

    - name: Run PR Pipeline
      run: make pull_request

    - name: PR Check Summary
      if: always()
      run: |
        echo "✅ PR pipeline complete"
        echo "Branch: ${{ github.head_ref }}"
        echo "Commit: ${{ github.sha }}"

  # Merge pipeline - runs on push to main
  merge:
    name: Build, Tag, and Push
    if: github.event_name == 'push'
    runs-on: [self-hosted, linux]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install Development Tools
      run: |
        # Add Go bin directory to PATH
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
        # Install golangci-lint
        if ! command -v golangci-lint >/dev/null 2>&1; then
          echo "Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
        fi
        
        # Install gotestsum
        if ! command -v gotestsum >/dev/null 2>&1; then
          echo "Installing gotestsum..."
          go install gotest.tools/gotestsum@latest
        fi
        
        # Install trivy
        if ! command -v trivy >/dev/null 2>&1; then
          echo "Installing trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $(go env GOPATH)/bin
        fi
        
        # Install checkov via pipx
        if ! command -v pipx >/dev/null 2>&1; then
          if command -v apt-get >/dev/null 2>&1; then
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get update -y
            sudo apt-get install -y python3-venv pipx
          fi
        fi
        python3 -m pipx ensurepath || true
        pipx install --force checkov

    - name: Run Merge Pipeline
      run: make merge DOCKER_TAG=${{ github.sha }}

    - name: Deployment Summary
      run: |
        echo "✅ Merge pipeline complete"
        echo "Image: docker-mirror.service.consul:5000/health-checker:${{ github.sha }}"
        echo "Latest: docker-mirror.service.consul:5000/health-checker:latest"
        echo "Commit: ${{ github.sha }}"
